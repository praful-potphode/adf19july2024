{
	"name": "df_scdtype2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_empdata_csv_scd",
						"type": "DatasetReference"
					},
					"name": "employeecsv"
				},
				{
					"dataset": {
						"referenceName": "ds_scd2_AzureSqlTable",
						"type": "DatasetReference"
					},
					"name": "azsqldimemployeescd2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_scd2_AzureSqlTable",
						"type": "DatasetReference"
					},
					"name": "InsertNewrecords"
				},
				{
					"dataset": {
						"referenceName": "ds_scd2_AzureSqlTable",
						"type": "DatasetReference"
					},
					"name": "insertoldrecordsnewvalues"
				},
				{
					"dataset": {
						"referenceName": "ds_scd2_AzureSqlTable",
						"type": "DatasetReference"
					},
					"name": "updateoldrecords"
				}
			],
			"transformations": [
				{
					"name": "CreateAuditCOlumns"
				},
				{
					"name": "exists1"
				},
				{
					"name": "join1"
				},
				{
					"name": "selectcsvcolumns"
				},
				{
					"name": "updateauditcolumnsforactive"
				},
				{
					"name": "selectazsqlcolumns"
				},
				{
					"name": "updateauditcolumnsforinactive"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as integer,",
				"          name as string,",
				"          designation as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> employeecsv",
				"source(output(",
				"          skey as integer,",
				"          empid as integer,",
				"          name as string,",
				"          designation as string,",
				"          startdate as date,",
				"          enddate as date,",
				"          iscurrent as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> azsqldimemployeescd2",
				"exists1 derive(startdate = currentDate(),",
				"          enddate = '',",
				"          iscurrent = 1) ~> CreateAuditCOlumns",
				"employeecsv, azsqldimemployeescd2 exists(employeecsv@empid == azsqldimemployeescd2@empid",
				"     && employeecsv@name == azsqldimemployeescd2@name,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"azsqldimemployeescd2, employeecsv join(azsqldimemployeescd2@empid == employeecsv@empid",
				"     && azsqldimemployeescd2@name == employeecsv@name,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          startdate,",
				"          enddate,",
				"          iscurrent,",
				"          empid = employeecsv@empid,",
				"          name = employeecsv@name,",
				"          designation = employeecsv@designation",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectcsvcolumns",
				"selectcsvcolumns derive(startdate = addDays(currentDate(), 1)) ~> updateauditcolumnsforactive",
				"join1 select(mapColumn(",
				"          empid = azsqldimemployeescd2@empid,",
				"          name = azsqldimemployeescd2@name,",
				"          designation = azsqldimemployeescd2@designation,",
				"          startdate,",
				"          enddate,",
				"          iscurrent,",
				"          skey",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectazsqlcolumns",
				"selectazsqlcolumns derive(enddate = currentDate(),",
				"          iscurrent = 0) ~> updateauditcolumnsforinactive",
				"updateauditcolumnsforinactive alterRow(updateIf(true())) ~> alterRow1",
				"CreateAuditCOlumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          skey as integer,",
				"          empid as integer,",
				"          name as string,",
				"          designation as string,",
				"          startdate as date,",
				"          enddate as date,",
				"          iscurrent as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> InsertNewrecords",
				"updateauditcolumnsforactive sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          skey as integer,",
				"          empid as integer,",
				"          name as string,",
				"          designation as string,",
				"          startdate as date,",
				"          enddate as date,",
				"          iscurrent as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          empid,",
				"          name,",
				"          designation,",
				"          startdate,",
				"          enddate,",
				"          iscurrent",
				"     )) ~> insertoldrecordsnewvalues",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          skey as integer,",
				"          empid as integer,",
				"          name as string,",
				"          designation as string,",
				"          startdate as date,",
				"          enddate as date,",
				"          iscurrent as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['empid','skey','name','designation'],",
				"     skipKeyWrites:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          skey,",
				"          empid,",
				"          name,",
				"          designation,",
				"          startdate,",
				"          enddate,",
				"          iscurrent",
				"     )) ~> updateoldrecords"
			]
		}
	}
}